//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use sym

use location
use filepath
use expr
use block
use function
use variable
use datatype
use util

import cbackend


class Ident(self, function: Function, object: Function | Variable, sym: Sym, objLocation: Location) {
  self.exported = false
  imported = false
  self.sym = sym
  typeswitch object {
    Function => object.appendNameIdent(self)
    Variable => object.insertIdent(self)
  }
  // Operator identifiers are not in any function hash table.
  if !isnull(function) {
    oldIdent = function.findIdent(sym)
    if !isnull(oldIdent) {
      Error("Tried to create an identifier '%s' that already exists in the function" % sym.name,
          objLocation)
    }
    function.insertIdent(self)
  }

  // Dump the identifier to the end of |string| for debugging purposes.
  func dumpToString(self, var text: string) {
    getRoot().indent(text)
    text.append("ident %s (0x%x) -> " % (ident.sym.name, <u32>ident))
    if !isnull(ident.function) {
      text += "%s %x\n" % (getFuncTypeName(ident.function.type), <u32>function)
    } else {
      text += "variable %x\n" % <u32>self.variable
    }
  }

  func emitC(self, emitter: CEmitter) {
    if !isnull(ident.function) {
          emitter.emitFunction(ident.function.type, <u32>function)
    } else {
      emitter.emitVariable(<u32>self.variable)
    }
  }

  // Find the identifier in the local scope, or in the module scope.  If
  // not found in the module scope, look in the global scope, but only
  // if scopeFunc is main.
  func find(scopeFunc: Function, sym: Sym) {
    ident = scopeFunc.findIdent(sym)
    if !isnull(ident) {
      return ident
    }
    location = scopeFunc.location
    if isnull(location) {
      // Builtin classes have no location.
      return null(Ident)
    }
    filepath = location.filepath
    moduleFunc = filepath.moduleFunc
    ident = moduleFunc.findIdent(name)
    if !isnull(ident) {
      return ident
    }
    // Some identifiers, like idents for built-in classes, are in the global scope.
    mainFunc = getRoot().mainFunc
    ident =  mainFunc.findIdent(name)
    if !isnull(ident) && (!ident.isModuleOrPackage() || scopeFunc == mainFunc) {
      return ident
    }
    return null(ident)
  }

  // Find the datatype of the identifier.  If a variable has not yet been set, it
  // will return null(datatype).
  func datatype(self) -> Datatype {
    if !isnull(self.function) {
      return Datatype(self.function)
    }
    return self.variable.datatype
  }

  // Return the sub-block of the identifier, if it has one.
  func subBlock(self) -> Block {
    if !isnull(self.function) {
      return self.function.subBlock
    }
    return deBlockNull
  }

  // Return the location of the identifier.
  func location(self) -> Location {
    if !isnull(self.function) {
      return self.function.location
    }
    return self.variable.location!
  }

  // Find an identifier from the path Expr.
  func findInScopeFromPath(scopeFunc: Function, pathExpr: Expr) -> Ident {
    realPathExpr = pathExpr
    if pathExpr.type == ExprType.As {
      realPathExpr = pathExpr.firstExpr
    }
    if realPathExpr.type == ExperType.Ident {
      return scopeFunc.findIdent(realPathExpr.val.symVal.name)
    }
    assert realPathExpr.type == ExprType.Dot
    subPathExpr = realPathExpr.firstExpr
    identExpr = subPathExpr.nextExprExpr
    assert identExpr.type == ExprType.Ident
    ident = findInScopeFromPath(scopeFunc, subPathExpr)
    if isnull(ident) {
      return null(Ident)
    }
    subscopeFunc = ident.subBlock()
    if isnull(subscopeFunc) {
      return null(Ident)
    }
    return subscopeFunc.findIdent(identExpr.val.symVal)
  }

  // Find an identifier from the path Expr.  |scopeFunc| is searched first.
  func findFromPath(scopeFunc: Function, pathExpr: Expr) -> Ident {
    ident = findInScopeFromPath(scopeFunc, pathExpr)
    if !isnull(ident) {
      return ident
    }
    // Try to find it in the global scope.
    return findInScopeFromPath(getRoot().mainFunc, pathExpr)
  }

  // Rename the identifier.  Also change the sym in its identifier Exprs.
  func rename(self, newName: Sym) {
    scopeFunc = ident.function
    scopeFunc.removeIdent(ident)
    self.sym = newName
    scopeFunc.appendIdent(ident)
    for expr in ident.exprs() {
      assert expr.type == ExprType.Ident
      expr.val = Value(newName)
    }
  }

  // Return a path Expr to the function.
  func createPathExpr(self) -> Expr {
    identExpr = Expr.newIdent(self.sym!, self.location())
    function = self.function!
    prefixExpr = function.createPathExpr()
    return Expr.newBinary(ExprType.Dot, prefixExpr, identExpr, self.location())
  }

  // Copy the identifier to the |destFunc|.  The caller must ensure
  // the identifier does not already exist on |destFunc|.
  func copy(self, destFunc: Function) -> Ident {
    newIdent = Ident(destFunction, type, self.sym, self.location)
    if !isnull(self.function) {
      self.function.appendIdent(newIdent)
    } else {
      self.variable.appendIdent(newIdent)
    }
    return newIdent
  }

  // Determine if this identifier represents a module or package.
  func isModuleOrPackage(self) -> bool {
    if !isnull(ident.function) {
      return ident
    }
    function = ident.function
    type = function.type
    return type == FuncType.Package || type == FuncType.Module
  }
}

relation Hashed Function Ident cascade ("sym")
relation DoublyLinked Function:"Name" Ident:"Name" cascade
relation OneToOne Variable Ident cascade
