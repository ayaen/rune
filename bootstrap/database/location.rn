//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This should replace the Location class in the database.  For now, it is local to
// the parser generator.

use filepath

class Location(self, filepath: Filepath, pos:u32, len: u32, line: u32) {
  self.pos = pos
  self.len = len
  self.line = line
  filepath.appendLocation(self)

  // Return an empty location.  This is used for thinks like module
  // functions that have no locaiton.
  func emptyLocation() -> Location {
    filepath = Filepath("__empty__", null(Filepath), false)
    return Location(filepath, 0u32, 0u32, 0u32)
  }

  // Write the location to stdout, with a filename and location number prefix.
  func dump(self) {
    filepath = self.filepath
    assert !isnull(filepath)
    path = filepath.getRelativePath()
    if path.length() > 0 {
      println "File %s, line %u:" % (path, self.line)
    }
    if filepath.text.length() > 0 {
      self.printLocationAndCarets()
      println
    }
  }

  // Like dump(), but prints msg.
  func error(self, msg, dumpText: bool = true, prefix: string = "") {
    filepath = self.filepath
    assert !isnull(filepath)
    path = filepath.getRelativePath()
    if path.length() > 0 {
      println prefix + "%s:%u: %s" % (path, self.line, msg)
    }
    if dumpText && filepath.text.length() > 0 {
      self.printLocationAndCarets(prefix)
      println
    }
  }

  func annotation(self, title: string, prefix: string) {
    filepath = self.filepath
    assert !isnull(filepath)
    path = filepath.getRelativePath()
    if path.length() > 0 {
      println "%s%s:%u" % (title, path, self.line)
    }
    if filepath.text.length() > 0 {
      self.printLocationAndCarets(prefix)
      println
    }
  }

  func printLocationAndCarets(self, prefix: string = "") {
    start = self.findLocationStart()
    end = self.findLocationEnd()
    print prefix
    println self.filepath.text[start:end]
    print prefix
    for i in range(self.pos - start) {
      print " "
    }
    for i in range(self.len) {
      print "^"
    }
  }

  func findLocationStart(self) -> u32 {
    pos = self.pos
    while pos != 0 {
      pos -= 1
      c = self.filepath.text[pos]
      if c == '\n' {
        return pos + 1
      }
    }
    return 0u32
  }

  func findLocationEnd(self) -> u32 {
    pos = self.pos
    while pos < <pos>self.filepath.text.length() {
      if self.filepath.text[pos] == '\n' {
        return pos
      }
      pos += 1
    }
    return <pos>self.filepath.text.length()
  }
}

relation DoublyLinked Filepath Location

unittest {
  rootFilepath = Filepath.new("testdata", null(Filepath), false)
  filepath = Filepath.new("testdata/hello", rootFilepath, false)
  location1 = Location(filepath, 0u32, 5u32, 1u32)
  location2 = Location(filepath, 7u32, 6u32, 1u32)
  filepath.readFile()
  location1.dump()
  location2.dump()
}
