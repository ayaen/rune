//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This is a one-to-many relation transformer that adds a hash table between
// class A and B.  The hash table is always a power of 2, and dynamically grows
// as needed, when the number of hash table elements equals the size of the
// table.  The child class B must have two methods: hash() -> u64, and
// equals(other) which compares the two instances of class B and returns true
// if they are equivalent.
//
// This transformer embeds a singly-linked list between A and B, which on average
// will never have more than one element, so the expected insert/remove time is
// still constant.
transformer HashedClass(A: Class, B: Class, cascadeDelete: bool = false,
    labelA: string = "", labelB: string = "", pluralB: string = "") {
  if pluralB == "" {
    pluralB = "$B_s";
  }
  prependcode A {
    self.$labelB$B_Table = arrayof(B)
    self.num$labelB$pluralB = 0

    func find$labelB$B(self, $B) {
      if self.$labelB$B_Table.length() == 0 {
        return null(self.$labelB$B_Table[u64])
      }
      // The B class must have a hash() method that returns u64.
      hashVal = $B.hash() & (self.$labelB$B_Table.length() - 1)
      entry = self.$labelB$B_Table[hashVal]
      while !isnull(entry) {
        // The B class must have an equals method.
        if entry!.equals($B) {
          return entry!
        }
        entry = entry!.nextHashed$A$labelB$B
      }
      return null(entry)
    }

    func check$labelB$B_Table(self) {
      length = self.$labelB$B_Table.length()
      if length == 0 {
        return
      }
      mask = length - 1
      for i in range(length) {
        entry = self.$labelB$B_Table[i]
        while !isnull(entry) {
          hash = entry!.hash() & mask
          if i != hash {
            println "Hash table check failed for ", entry!
            raise Exception.Internal, "i = ", i, ", hash = ", hash
          }
          entry = entry!.nextHashed$A$labelB$B
        }
      }
    }

    func insert$labelB$B(self, entry) {
      func updateHashTableAfterResize(self) {
        newLength = self.$labelB$B_Table.length()
        oldLength = newLength >> 1
        newMask = newLength - 1
        oldMask = oldLength - 1
        // Recompute the index for each object since the hash table size changed.
        for i in range(oldLength) {
          oldEntry = self.$labelB$B_Table[i]
          prevEntry = null(oldEntry)
          while !isnull(oldEntry) {
            rawHash = oldEntry!.hash()
            newHash = rawHash & newMask
            oldHash = rawHash & oldMask
            assert oldHash == i
            nextEntry = oldEntry!.nextHashed$A$labelB$B
            if newHash == oldHash {
              prevEntry = oldEntry!
            } else {
              // Remove oldEntry.
              if isnull(prevEntry) {
                self.$labelB$B_Table[i] = nextEntry
              } else {
                prevEntry!.nextHashed$A$labelB$B = nextEntry
              }
              // Insert entry.
              oldEntry!.nextHashed$A$labelB$B = self.$labelB$B_Table[newHash]
              self.$labelB$B_Table[newHash] = oldEntry!
            }
            oldEntry = nextEntry
          }
        }
      }

      if self.num$labelB$pluralB == self.$labelB$B_Table.length() {
        if self.$labelB$B_Table.length() == 0 {
          self.$labelB$B_Table.resize(32)
        } else {
          // Double the size of the hash table.
          self.$labelB$B_Table.resize(self.$labelB$B_Table.length() << 1)
          updateHashTableAfterResize(self)
        }
      }
      hash = entry.hash() & (self.$labelB$B_Table.length() - 1)
      entry.nextHashed$A$labelB$B = self.$labelB$B_Table[hash]
      self.$labelB$B_Table[hash] = entry
      entry.$labelA$A = self
      self.num$labelB$pluralB += 1
      ref entry
    }

    func remove$labelB$B(self, child) {
      hash = child.hash() & (self.$labelB$B_Table.length() - 1)
      entry = self.$labelB$B_Table[hash]
      prev = null(entry)
      while !isnull(entry) {
        if entry! == child {
          if isnull(prev) {
            self.$labelB$B_Table[hash] = child.nextHashed$A$labelB$B
          } else {
            prev!.nextHashed$A$labelB$B = child.nextHashed$A$labelB$B
          }
          child.nextHashed$A$labelB$B = null(child)
          child.$labelA$A = null(self)
          self.num$labelB$pluralB -= 1
          unref child
          return
        }
        prev = entry!
        entry = entry!.nextHashed$A$labelB$B
      }
      raise Exception.Internal, "Entry not found in map"
    }

    iterator $labelB$pluralB(self) {
      for i in range(self.$labelB$B_Table.length()) {
        entry = self.$labelB$B_Table[i]
        while !isnull(entry) {
          yield entry!
          entry = entry!.nextHashed$A$labelB$B
        }
      }
    }

    iterator safe$labelB$pluralB(self) {
      for i in range(self.$labelB$B_Table.length()) {
        entry = self.$labelB$B_Table[i]
        while !isnull(entry) {
          nextEntry = entry!.nextHashed$A$labelB$B
          yield entry!
          entry = nextEntry
        }
      }
    }
  }

  if cascadeDelete {
    // If this is a cascade-delete relationship, destroy children in
    // the destructor.
    appendcode A.destroy {
      for x$labelB$B in range(self.$labelB$B_Table.length()) {
        $labelB$B_Entry = self.$labelB$B_Table[x$labelB$B]
        while !isnull($labelB$B_Entry) {
          next$labelB$B_Entry = $labelB$B_Entry!.nextHashed$A$labelB$B
          $labelB$B_Entry!.nextHashed$A$labelB$B = null($labelB$B_Entry!)
          $labelB$B_Entry!.$labelA$A = null(self)
          $labelB$B_Entry!.destroy()
          $labelB$B_Entry = next$labelB$B_Entry
        }
        self.$labelB$B_Table[x$labelB$B] = null($labelB$B_Entry)
      }
    }
  } else {
    prependcode A.destroy {
      for x$labelB$B in range(self.$labelB$B_Table.length()) {
        $labelB$B_Entry = self.$labelB$B_Table[x$labelB$B]
        while !isnull($labelB$B_Entry) {
          next$labelB$B_Entry = $labelB$B_Entry!.nextHashed$A$labelB$B
          $labelB$B_Entry!.nextHashed$A$labelB$B = null($labelB$B_Entry)
          $labelB$B_Entry!.$labelA$A = null(self)
          $labelB$B_Entry = next$labelB$B_Entry
        }
        self.$labelB$B_Table[x$labelB$B] = null($labelB$B_Entry)
      }
    }
  }

  prependcode B {
    self.$labelA$A = null(A)
    self.nextHashed$A$labelB$B = null(self)
  }
  // Remove self from A on destruction.
  prependcode B.destroy {
    if !isnull(self.$labelA$A) {
      self.$labelA$A!.remove$labelB$B(self)
    }
  }
}
