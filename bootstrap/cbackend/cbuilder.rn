//  Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import database as db
import types

use clanguageclasses
use ctypegen
use escapestring
use sym

relation HashedClass CurrentScope CIdentifier cascade

class CurrentScope(self) {

  func open(self) {
    // todo
  }

  func close(self) {
    // todo
  }

  func getIdentifier(self, name: Sym, type: CTypeExpr?, bindingInstance: bool) -> CIdentifier {
    // todo: handle the case where the definition was in an outer scope.
    id = CIdentifier(name, type, false, bindingInstance)
    exists = self.findCIdentifier(id)
    if isnull(exists) {
      id.firstInstance = true
      self.insertCIdentifier(id)
    }
    return id
  }
}

relation DoublyLinked CBuilder CBlock cascade

class CBuilder(self, tc: types.TypeChecker) {
  self.currentParamList = null(CParamList)
  self.currentExprList = null(CExprList)
  self.program = CProgram()
  self.currentBlock = null(CBlock)
  self.identifierScope = CurrentScope()
  self.typechecker = tc
  self.typeGenerator = CTypeGenerator(tc)

  func build(self, module: db.Function) -> CProgram {
    module.genC(self)
    return self.program
  }

  func addDeclaration(self, dec: CDeclaration) {
    self.program.insertCDeclaration(dec)
  }

  func openScope(self) {
    self.identifierScope.open()
  }

  func closeScope(self) {
    self.identifierScope.close()
  }

  func openBlock(self, location: db.Location?) {
    self.currentBlock = CBlock(location)
    //self.cblocks().appendCBlock(block)
    //self.appendCBlock(block)
    self.appendCBlock(CBlock(location))
  }

  func closeBlock(self) -> CBlock {
    //block = self.currentCBlock
    block = self.lastCBlock!
    //self.currentCBlock = block.prevCBlockCBuilder
    //self.cblocks().removeCBlock(block)
    self.removeCBlock(block)
    return block
  }

  func addStatement(self, statement: CStatement) {
    if isnull(self.currentBlock) {
      self.program.addStatementToMain(statement)
    } else {
      self.currentBlock.appendCStatement(statement)
    }
  }

  func openParamList(self) {
    assert isnull(self.currentParamList)
    self.currentParamList = CParamList()
  }

  func closeParamList(self) -> CParamList {
    assert !isnull(self.currentParamList)
    params = self.currentParamList!
    self.currentParamList = null(CParamList)
    return params
  }

  func addParam(self, param: CParameter) {
    assert !isnull(self.currentParamList)
    self.currentParamList.appendCParameter(param)
  }

  func cParameter(self, location: db.Location, name: string, type: CTypeExpr) -> CParameter {
    return CParameter(location, name, type)
  }

  func cIdentifier(self, symbol: Sym, bindingInstance: bool) -> CExpr {
    type = self.typechecker.symbol(symbol)
    if isnull(type) {
      ctype = null(CTypeExpr)
    } else {
      ctype = self.typeGenerator.genCType(type!)
    }
    id = self.identifierScope.getIdentifier(symbol, ctype, bindingInstance)
    if id.firstInstance {
      if !isnull(self.currentBlock) {
        self.currentBlock.declare(id)
      } else {
        self.program.mainCBlock.declare(id)
      }
    }
    return CExpr(id)
  }

  func cType(self, type: CType) -> CTypeExpr {
    return CTypeExpr(type)
  }

  func cIntType(self, location: db.Location, isSigned: bool, width: u32) -> CTypeExpr {
    if isSigned {
      if width <= 8 {
        prim = CPrimitiveType(CPrimitiveType.Type.Int8)
      } else if width <= 16 {
        prim = CPrimitiveType(CPrimitiveType.Type.Int16)
      } else if width <= 32 {
        prim = CPrimitiveType(CPrimitiveType.Type.Int32)
      } else if width <= 64 {
        prim = CPrimitiveType(CPrimitiveType.Type.Int64)
      } else {
        raise Status.Unimplemented, "No support for primitive integers of width larger than 64"
      }
    } else {
      if width <= 8 {
        prim = CPrimitiveType(CPrimitiveType.Type.Uint8)
      } else if width <= 16 {
        prim = CPrimitiveType(CPrimitiveType.Type.Uint16)
      } else if width <= 32 {
        prim = CPrimitiveType(CPrimitiveType.Type.Uint32)
      } else if width <= 64 {
        prim = CPrimitiveType(CPrimitiveType.Type.Uint64)
      } else {
        raise Status.Unimplemented, "No support for primitive integers of width larger than 64"
      }
    }
    return CTypeExpr(prim)
  }

  func cFloatType(self, location: db.Location, width: u32) -> CTypeExpr {
    if width == 32 {
      return CTypeExpr(CPrimitiveType(CPrimitiveType.Type.Float))
    } else if width == 64 {
      return CTypeExpr(CPrimitiveType(CPrimitiveType.Type.Double))
    }
    raise Status.Unimplemented, "No support for floating point width %u32." % width
  }

  func cStringType(self, location: db.Location) -> CTypeExpr {
    return CTypeExpr(CDefinedType("string"))
  }

  func cBooleanType(self, location: db.Location) -> CTypeExpr {
    return CTypeExpr(CPrimitiveType(CPrimitiveType.Type.Int8))
  }

  func cVoidType(self, location: db.Location) -> CTypeExpr {
    return CTypeExpr(CPrimitiveType(CPrimitiveType.Type.Void))
  }

  /* Rune expressions *********************************************************************/

  func openExprList(self) {
    assert isnull(self.currentExprList)
    self.currentExprList = CExprList()
  }

  func closeExprList(self) -> CExpr {
    assert !isnull(self.currentExprList)
    list = self.currentExprList!
    self.currentExprList = null(CExprList)
    return CExpr(list)
  }

  func addExpr(self, expr: CExpr) {
    assert !isnull(self.currentExprList)
    self.currentExprList.appendCExpr(expr)
  }

  func cStringLiteral(self, value: string) -> CExpr {
    return CExpr(CLiteral(value))
  }

  func cBoolLiteral(self, value: bool) -> CExpr {
    return CExpr(CLiteral(value))
  }

  func cIntLiteral(self, value: db.Bigint) -> CExpr {
    return CExpr(CLiteral(value))
  }

  func cUintLiteral(self, value: Uint) -> CExpr {
    return CExpr(CLiteral(value))
  }

  func cFloatLiteral(self, value: Float) -> CExpr {
    return CExpr(CLiteral(value))
  }

  func cUnaryMinus(self, location: db.Location, arg: CExpr) -> CExpr {
    return CExpr(CPrefixOperator(location, CPrefixOperator.Type.UnaryMinus, arg))
  }

  func cBinaryOperator(self, location: db.Location, op: CBinaryOperator.Type,
                       left: CExpr, right: CExpr) -> CExpr {
    return CExpr(CBinaryOperator(location, op, left, right))
  }

  func cCall(self, location: db.Location, name: string | CRuntimeFunction, args: CExpr) -> CExpr {
    return CExpr(CCall(location, name, args))
  }



  /* Rune statements *******************************************************************/

  func cPrintlnStatement(self, location: db.Location, args: CExpr) -> CStatement {
    return CStatement(self.cCall(location, CRuntimeFunction.Printf, args))
  }

  func cFunDef(self, location: db.Location, name: string, returnType: CTypeExpr,
               params: CParamList, body: CBlock) -> CDeclaration {
    return CDeclaration(CFunctionDeclaration(
       location, name, returnType, params, body))
  }

}

