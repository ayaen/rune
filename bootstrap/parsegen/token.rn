//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import database.value as va
import database.location as loc

use keytab

enum TokenType {
  Nonterm
  Keyword
  Ident
  Integer
  Float
  Bool
  String
  Eof
  RandInt
  IntType
  UintType
}

class Token(self, type: TokenType, location: loc.Location, keyword: Keyword? = null(Keyword),
    value: va.Value? = null(va.Value)) {
  self.type = type
  self.location = location
  // We should use a tagged union here.
  self.keyword = keyword
  self.value = value

  // Pass in the text from the lexer.
  func dump(self) {
    self.location.dump()
  }

  // Return true if this is the eof token.
  func eof(self) {
    return self.type == TokenType.eof
  }
}

unittest dumpTest {
  filepath = fp.Filepath.new("test_filepath", null(fp.Filepath), false)
  filepath.text = "first line\nsecond line"
  token1 = Token(TokenType.Ident, loc.Location(filepath, 0u32, 5u32, 1u32))
  token2 = Token(TokenType.Ident, loc.Location(filepath, 6u32, 4u32, 1u32))
  newline = Token(TokenType.Keyword, loc.Location(filepath, 10u32, 1u32, 1u32))
  token3 = Token(TokenType.Ident, loc.Location(filepath, 11u32, 6u32, 2u32))
  token4 = Token(TokenType.Ident, loc.Location(filepath, 18u32, 4u32, 2u32))
  token1.dump()
  token2.dump()
  newline.dump()
  token3.dump()
  token4.dump()
}

unittest {
  // Unnamed unit tests declare stuff common to all unit tests in the file.
  import database.filepath as fp
}

unittest eofTest {
  text = ""
  filepath = fp.Filepath.new("test_filepath", null(fp.Filepath), false)
  token = Token(TokenType.Eof, loc.Location(filepath, 0u32, 0u32, 1u32))
  assert token.type == TokenType.Eof
}
