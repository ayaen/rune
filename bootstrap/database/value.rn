//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import cbackend as cb

use sym

use bigint
use datatype


func getDatatypeType(value) -> DatatypeType {
  typeswitch value {
    string => return DatatypeType.String
    bool => return DatatypeType.Bool
    Int => return DatatypeType.Int
    Uint => return DatatypeType.Uint
    Bigint => {
      if value.isSigned {
        return DatatypeType.Int
      }
      return DatatypeType.Uint
    }
    Float => return DatatypeType.Float
    Sym => return DatatypeType.Sym
    default => raise Status.Unimplemented, "Datatype not yet supported by the Value class"
  }
}

class Value(self: Value, value: string | bool | Int | Uint | Bigint | Float | Sym) {
  self.type = getDatatypeType(value)
  self.width = 0u32
  // TODO: Merge these values into a union when unions are supported.
  self.stringVal = ""
  self.boolVal = false
  self.intVal = null(Bigint)
  self.floatVal = 0.0f64
  self.symVal = null(Sym)
  // We need a tagged union here, but for now we'll just bloat this class.
  typeswitch value {
    string => self.stringVal = value
    bool => self.boolVal = value
    Float => {
      // This must be the widest supported floating point type, currently f64.
      self.floatVal = <f64>value
      self.width = widthof(value)
    }
    Int, Uint => {
      self.intVal = Bigint(value)
      self.width = widthof(value)
    }
    Bigint => {
      self.intVal = value
      self.width = value.width
    }
    Sym => self.symVal = value
  }

  export func toString(self) -> string {
    switch self.type {
      DatatypeType.String => return "\"" + self.stringVal + "\"" // TODO: Escape the string.
      DatatypeType.Bool => return self.boolVal ? "true" : "false"
      DatatypeType.Float => return "%ff%u" % (self.floatVal, self.width)
      DatatypeType.Int, DatatypeType.Uint => return self.intVal.toString()
      DatatypeType.Sym => return self.symVal.name
    }
  }

  operator == (v1: Value, v2: Value) {
    if v1.type != v2.type || v1.width != v2.width {
      return false
    }
    switch v1.type {
      DatatypeType.String => return v1.stringVal == v2.stringVal
      DatatypeType.Bool => return v1.boolVal == v2.boolVal
      DatatypeType.Uint, DatatypeType.Int => return v1.intVal! == v2.intVal!
      DatatypeType.Float => return v1.floatVal == v2.floatVal
      DatatypeType.Sym => return v1.symVal == v2.symVal
    }
  }

  operator != (v1: Value, v2: Value) {
    return !(v1 == v2)
  }

  func genC(self, builder: cb.CBuilder) -> cb.CExpr {
    switch self.type {
      DatatypeType.Bool => return  builder.cBoolLiteral(self.boolVal)
      DatatypeType.String => return builder.cStringLiteral(self.stringVal)
      DatatypeType.Int => return builder.cIntLiteral(self.intVal)
      DatatypeType.Uint => return builder.cIntLiteral(self.intVal)
      DatatypeType.Float => return builder.cFloatLiteral(self.floatVal)
      DatatypeType.Sym => return builder.cStringLiteral(self.symVal.name)
      default => raise Status.Unimplemented, "Value type not yet supported by C backend: ", self.type
    }
  }
}

unittest valueTypesTest {
  a = Value(0xdeadbeefi64)
  b = Value("This is a test")
  c = Value(true)
  d = Value(3.1415927f32)
  e = Value(Sym.new("test"))
  println a.intVal.toStringInBase(16u32)
  println b
  println c
  println d
  println e
}

unittest u64Test {
  v = Value(1)
  println v.toString()
}

unittest equalTest {
  v1 = Value(1)
  v2 = Value(1)
  println v1 == v2
}

unittest notEqualTest {
  v1 = Value(1)
  v2 = Value(2)
  println v1 == v2
}

unittest trueFalseTest {
  assert Value(true) != Value(false)
  assert Value(false) != Value(true)
  assert !(Value(true) == Value(false))
  assert !(Value(false) == Value(true))
  assert Value(true) == Value(true)
  assert Value(false) == Value(false)
}
