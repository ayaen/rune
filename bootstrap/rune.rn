//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import database as db
import io
import os
import parse
import types
import cbackend as c
use sym

// Print commandline help and exit.
func usage() {
  println "Usage: ", argv[0], " [options...] <top level runeFile>\n" +
      "    -d|--debug:  Run in debug mode, which generates a lot of internal logging.\n" +
      "    -q:          Don't output trace information.\n" +
      "    -O:          Optimized build\n" +
      "    --parseTree: Print parse trees of parsed files.\n" +
      "    --funcTree:  Print the tree of functions.\n" +
      "    --hir:       Print HIR output.\n" +
      "    --tc:        Print typechecker output.\n" +
      "    --oc <filename>: output C to the given filename.  A - means write to stdout.\n" +
      "    -p <dir>:    Use <dir> as the root directory for Rune's builtin packages.\n" +
      "    -n:          Do not compile the resulting .c file."
  exit(1i32)
}

// Run the clang compiler on the C code we generated.
func runClangCompiler(cFileName: string, debugMode: bool, optimized: bool) -> bool {
  outFileName = stripSuffix(cFileName)
  optFlag = optimized? "-O3" : ""
  if debugMode {
    optFlag = "-g -O0";
  }
  clangPath = "clang"
  command = "%s %s -Wno-main-return-type -fPIC -o %s %s" %
      (clangPath, optFlag, outFileName, cFileName)
  return  os.system(command) == 0
}

func stripSuffix(fileName: string) -> string {
  i = fileName.length()
  while i > 0 && fileName[i - 1] != '.' {
    i -= 1
  }
  if i == 0 {
    return fileName
  }
  return fileName[0:i - 1]
}

if argv.length() <= 1 {
  usage();
}

root = db.getRoot()

packageDir = io.getenv("TEST_SRCDIR")
if packageDir != "" {
  if packageDir[packageDir.length() - 1] != '/' {
    packageDir.append('/')
  }
  packageDir.concat("google3/third_party/rune/bootstrap/")
} else {
  runeExe = argv[0]
  packageDir = runeExe[0 : runeExe.rfind("/") + 1]
}
root.packageDir  = packageDir

optimized = false
runClang = true
root.generateC = true

xArg = 1
while xArg < argv.length() && argv[xArg][0] == '-' {
  if argv[xArg] == "-d" || argv[xArg] == "--debug" {
    root.debugMode = true
    xArg += 1
  } else if argv[xArg] == "-q" {
    root.quietMode = true
    xArg += 1
  } else if argv[xArg] == "--parseTree" {
    root.dumpParseTree = true
    xArg += 1
  } else if argv[xArg] == "--funcTree" {
    root.dumpFuncTree = true
    xArg += 1
  } else if argv[xArg] == "--hir" {
    root.dumpHir = true
    xArg += 1
  } else if argv[xArg] == "--tc" {
    root.traceTypes = true
    xArg += 1
  } else if argv[xArg] == "--oc" {
    xArg += 1
    if xArg == argv.length() {
      println "--oc requires an output filename"
      exit(1i32)
    }
    root.outputCFilename = argv[xArg]
    xArg += 1
  } else if argv[xArg] == "-p" {
    xArg += 1
    if xArg == argv.length() {
      println "-p requires a path to the root package directory"
      exit(1i32)
    }
    root.packageDir = argv[xArg]
    if root.packageDir[root.packageDir.length() - 1] != '/' {
      root.packageDir.append('/')
    }
      xArg += 1
  } else if argv[xArg] == "-n" {
    runClang = false
    xArg += 1
  } else {
    usage()
    exit(1i32)
  }
}

if xArg + 1 != argv.length() {
  usage()
}
parser = parse.Peg(root.packageDir + "parse/rune.syn")
parser.parseRules()
mainFunc = db.getMainFunc()
fileName = argv[xArg]
if fileName[fileName.length() - 3 : fileName.length()] != ".rn" {
  println "Rune file ", fileName, " must end in .rn."
  exit(1i32)
}
if !root.quietMode {
  println "Parsing ", fileName
}
node = parser.parse(fileName, allowUnderscores = true)
if isnull(node) {
  exit(1i32)
}
moduleName = stripSuffix(fileName)
module = db.Function(mainFunc, db.FuncType.Module, Sym.new(moduleName),
  db.Linkage.Module, db.Location.emptyLocation())
parse.HirBuilder(node!, module).build()
tc = types.TypeChecker()
tc.function(module)
numTypeErrors = tc.countTypeErrors()
if numTypeErrors > 0 {
  println "Found %u type error%s." % (numTypeErrors, numTypeErrors > 1 ? "s" : "")
  tc.dumpTypeErrors()
} else if root.generateC {
  if root.outputCFilename.length() == 0 {
    root.outputCFilename = moduleName + ".c"
  }
  emitter = c.CEmitter(root.outputCFilename)
  program = c.CBuilder(tc).build(module)
  program.emit(emitter)
  emitter.close()
  if runClang && !runClangCompiler(root.outputCFilename, root.debugMode, optimized) {
    println "Could not compile ", fileName
    exit(1i32)
  }
}
