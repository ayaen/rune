//  Copyright 2022 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use sym

use root
use location
use value
use function
use datatype
use expr

class Variable(self, function: Function, isParam: bool, isConst: bool, sym: Sym,
    initializer: Expr?, typeExpr: Expr?, generated: bool, location: Location) {
  self.isParam = isParam  // Otherwise, it is a local variable.
  self.isConst = isConst
  self.sym = sym
  if !isnull(initializer) {
    self.insertInitializerExpr(initializer!)
  }
  if !isnull(typeExpr) {
    self.insertTypeExpr(typeExpr!)
  }
  self.instantiated = false  // Some variables hold types, not values.
  self.location = location
  self.inClassSignature = false
  // TODO: Comment this in when we port Datatype.
  // self.datatype = null(Datatype)
  // Set if the variable is initialized in the scope-func.  This is used to
  // determine if we should initialize it up-front or later.
  self.initializedAtTop = false
  // Class constructor parameters declared <withBrackets> become template parameters.
  // Template parameters are in the template signature.
  self.inTemplateSig = false
  // Used when renaming variables to eliminate conflicts with generated code.
  self.savedSym = null(Sym)
  // Used when interpreting Rune code generators.
  self.value = null(Value(0u32))
  self.generated = generated
  self.entryValue = 0u32  // Set for variables representing enum entries.
  // TODO: Comment this in when we port Datatype
  // self.savedDatatype = null(Datatype)  // Used in matching overloaded operators.
  function.appendVariable(self)
  Ident(function, self, sym, location)

  // Dump the variable to a string for debugging purposes.
  func dumpToString(self, var text: string) {
    getRoot().indent(text)
    if self.isParam && !self.isConst {
      text += "var "
    }
    text += "%s" % self.sym.name
    if !isnull(self.typeExpr) {
      text += ": "
      self.typeExpr!.dumpToString(text)
    }
    if !isnull(self.initializerExpr) {
      text += " = "
      self.initializerExpr!.dumpToString(text)
    }
  }

  // Dump the variable to stdout for debugging purposes.
  func dump(self) {
    text = ""
    self.dumpToString(text)
    print text
  }

  // Make a copy of a variable in |destFunction|.
  func copy(self, destFunc: Function) -> Variable {
    initializer = null(Expr)
    if !isnull(self.initializerExpr) {
      initializer = self.initializerExpr!.copy()
    }
    type = null(Expr)
    if !isnull(self.typeExpr) {
      type = self.typeExpr!.copy()
    }
    newVariable = Variable(destFunc, self.isParam, self.isConst, self.sym,
        initializer, type, self.generated, self.location)
    return newVariable
  }

  // Rename the variable.  Save the old name, in case it needs to be restored later.
  func rename(self, newName: Sym) {
    self.savedName = self.sym
    for ident in self.idents() {
      // There should just be one.
      ident.rename(newName)
    }
  }
}

relation DoublyLinked Function Variable cascade
