//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// FilePtr is reference counted so the file will automatically close.
class FilePtr(self: FilePtr, fileName: string, ptr: u64) {
  self.fileName = fileName
  self.ptr = ptr

  // Reads the entire file as a string, or up to size if size is > 0.
  func read(self, size = 0) -> string {
    data = ""
    if size > 0 {
      data.resize(size)
      len = freadInternal(self.ptr, data)
      // Only happens at EOF or error.
      if len < size {
        if ferrorInternal(self.ptr) {
          throw "Error reading from ", self.fileName
        }
        data.resize(len)
      }
      return data
    }
    chunkSize = 1 << 14  // Try to read 16KiB at a time.
    data.resize(chunkSize)
    entireFile = ""
    do {
      len = freadInternal(self.ptr, data)
    } while (len == chunkSize) {
      entireFile.concat(data)
    }
    if len > 0 {
      data.resize(len)
      entireFile.concat(data)
    }
    if ferrorInternal(self.ptr) {
      throw "Error reading from ", self.fileName
    }
    return entireFile
  }

  func write(self, data: string) {
    if !fwriteInternal(self.ptr, data) {
      throw "Unable to write to file ", self.fileName
    }
  }

  final(self: FilePtr) {
    if (!fcloseInternal(self.ptr)) {
      throw "Could not close file ", self.fileName
    }
  }
}

func open(fileName: string, mode: string) -> FilePtr? {
  ptr = fopenInternal(fileName, mode)
  if ptr == 0 {
    return null(FilePtr)
  }
  return FilePtr(fileName, ptr)
}

extern "C" func fopenInternal(fileName: string, mode: string) -> u64
extern "C" func fcloseInternal(ptr: u64) -> bool
extern "C" func freadInternal(ptr:u64, buf: string) -> u64
extern "C" func fwriteInternal(ptr:u64, buf: string) -> bool
extern "C" func ferrorInternal(ptr:u64) -> bool
