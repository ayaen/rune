//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

func nestedTryCatch(err1: bool, err2: bool, err3: bool, testReturn: bool) raises Status.Ok {
  try {
    try {
      if err1 {
        raise Status.Ok, "Throwing err1"
      }
      if testReturn {
        println "Returning from nested err1"
        return
      }
    } except e {
      default => {
        println "Caght err1: ", e.errorMessage
        try {
          if err2 {
            raise Status.Ok, "Throing err2"
          }
          if testReturn {
            println "Returnning from err2"
            return
          }
        } except e {
          default => {
            println "Caught err2: ", e.errorMessage
            try {
              if err3 {
                raise Status.Ok, "Throing err3"
              }
              if testReturn {
                println "Returnning from err3"
                return
              }
            } except e {
              default => {
                println "Caught err3: ", e.errorMessage
                if testReturn {
                  println "Returning after catching err3: ", e.errorMessage
                  return
                }
              }
            }
          }
        }
        if testReturn {
          println "Returning after catching err1: ", e.errorMessage
          return
        }
      }
    }
  } except e {
    default => println "Caught exception: ", e.errorMessage
  }
}

func tryAllCombos() {
  println "Trying err1"
  nestedTryCatch(true, false, false, false)
  println "Trying err2"
  nestedTryCatch(true, true, false, false)
  println "Trying err3"
  nestedTryCatch(true, true, true, false)
  println "Trying return err1"
  nestedTryCatch(false, false, false, true)
  println "Trying return err2"
  nestedTryCatch(true, false, false, true)
  println "Trying return err3"
  nestedTryCatch(true, true, false, true)
  println "Trying return err3"
  nestedTryCatch(true, true, true, true)
  raise Status.Ok, "Final error"
}

try {
  tryAllCombos()
} except e {
  default => println e.errorMessage
}
