//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import io

import database.filepath as fp
use char
use keytab
use lexer
use mtoken
use rule

// Parse the file of grammar rules and return a Parser for it.
func parseRules(fileName: string) -> Parser {
  parser = Parser(fileName)
  parser.parseRules()
}

class Parser(self, fileName: string) {
  keytab = buildKeywordTable()
  filepath = fp.Filepath("test/path", null(fp.Filepath), false)
  lexer = Lexer(filepath, keytab)
  self.insertLexer(lexer)

  // Parse rules from text, and build
  func parseRules(self: Parser) {
    while self.parserRule() {
    }
  }

  // Parse a single rule.
  func parserRule(self: Parser) {
    self.parseRuleHeader()
    self.parseProductions()
  }

  // Parse a rule header: NONTERM ':'.
  func parseRuleHeader(self: Parser) {
    lexval = self.lexer.parseToken()
    self.expectToken(lexval, TokenType.Nonterm)
    lexVal = self.lexer.parseToken()
    self.expectToken(lexval, TokenType.Colon)
  }

  // Parse productions for a rule.
  func parseProductions(parser: Parser) {
  }

  // Skip space in the input.
  func skipSpace(self) {
    while !self.eof() && self.text[pos] < ' ' {
      self.pos += 1
    }
  }

  func eof(self) {
    return self.pos >= self.text.length()
  }

  func expectToken(self, lexval: Lexval, value: string) {
    if self.pos + value.length() > self.text.length() {
      self.error("Input too short: expecting " + value)
    }
  }

  func error(self, text) {
    raise Status.InvalidArgument, "Syntax error at ", self.lineNum, ": ", text
  }
}

func buildKeywordTable() -> Keytab {
  keytab = Keytab()
  Keyword(keytab, ":")
  Keyword(keytab, "|")
  Keyword(keytab, ";")
  return keytab
}

relation OneToOne Parser Lexer cascade
