//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Build the High-level Intermediate Representation (HIR).
//
// This module traverses the AST (the Node class), and builds the HIR
// representation.  See g3doc/database_design.md for documentation on the HIR
// classes and relations.

import database as db
use exprTree
use keytab
use lexer
use pegparser
use sym
use token

// The AST structure is defined in rune.syn.
// To split this task in two, we build Expr instances in buildExpr.rn.
// When both are complete, we'll merge buildExpr.rn into hir.rn.
class HirBuilder(self, goalNode: Node) {
  self.goalNode = goalNode
  self.buildParseSyms()

  func build(self: HirBuilder) {
    self.buildFromExprNodes(self.goalNode)
  }

  // Traverse the AST looking for nodes of the form:
  //   expr(...)
  // Build expression trees from these using the db.Expr class.
  func buildFromExprNodes(self: HirBuilder, node: Node) {
    if node.getRuleSym() == self.exprSym {
      self.buildExprTree(node)
    } else {
      for child in node.childNodes() {
        self.buildFromExprNodes(child)
      }
    }
  }

  func buildParseSyms(self: HirBuilder) {
    self.exprSym = Sym.new("expr")
  }
}
