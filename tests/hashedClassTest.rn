//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

class Foo(self) {
  func countBars(self: Foo) {
    numBars = 0
    for bar in foo.bars() {
      numBars += 1
    }
    return numBars
  }
}

class Bar(self, name: string) {
  self.name = name

  func new(foo: Foo, name: string) -> Bar {
    newBar = Bar(name)
    oldBar = foo.findBar(newBar)
    if !isnull(oldBar) {
      newBar.destroy()
      return oldBar!
    }
    foo.insertBar(newBar)
    return newBar
  }

  func hash(self) -> u64 {
    return hashValue(self.name)
  }

  func equals(self, other) {
    return self.name == other.name
  }
}

relation HashedClass Foo Bar cascade

foo = Foo()

// Basic check.
bob = Bar.new(foo, "Bob")
newBob = Bar.new(foo, "Bob")
assert newBob == bob
alice = Bar.new(foo, "Alice")
for bar in foo.bars() {
  println bar.name
}
bob.destroy()
for bar in foo.bars() {
  println bar.name
}
alice.destroy()
assert foo.numBars == 0

// Insert entries.
numEntries = 256
for i in range(numEntries) {
  name = "bar%u" % i
  Bar.new(foo, name)
}

// Delete some randomly.
numDeleted = 0
for bar in foo.safeBars() {
  if hashValue(bar.hash()) & 0x1 == 0 {
    bar.destroy()
    numDeleted += 1
  }
}

// The universe will reach heat death before this fails.
assert numDeleted > 0
assert foo.countBars() == numEntries - numDeleted

// Insert more entries.
for i in range(numEntries) {
  name = "baz%u" % i
  Bar.new(foo, name)
}

assert foo.countBars() == numEntries * 2 - numDeleted

// Check the table.
foo.checkBarTable()
println "passed"
