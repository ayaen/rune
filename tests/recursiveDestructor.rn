//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

class Foo(self, bar: Bar?, hash: u64) {
  self.hash = hash
  if !isnull(bar) {
    bar.insertFoo(self)
  }
}

class Bar(self, foo: Foo, hash: u64) {
  self.hash = hash
  if !isnull(foo) {
    foo.insertBar(self)
  }
}

relation Hashed Foo Bar cascade
relation Hashed Bar Foo cascade

// Create a cascade-delete relationship loop between foo and bar.
foo = Foo(null(Bar), 0)
bar = Bar(foo, 1)
bar.insertFoo(foo)
// Now destroy bar.  If the auto-generated destructor for Foo and Bar both
// recursively destroy children before removing themselves from parents, then
// an infinite call loop occurs, overflowing the stack.
bar.destroy()
println "Passed"
