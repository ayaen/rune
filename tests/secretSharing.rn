//  Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This implements Shamir secret sharing, the most popular cryptographic
// threshold secret sharing scheme.  You can recover the secret if you get
// shares from t of n entities holding the shares.  For example, we can have
// 3-of-5, or 10-of-15.  For a good overview, see:
// https://en.wikipedia.org/wiki/Shamir%27s_secret_sharing

// Polynomials are represented as arrays of coefficients in the field.  The
// constant term is in `poly[0]`, and the constant on the highest degree term
// is in poly[poly.length() - 1].  E.g. 2x^2 + 3x + 5 would be [5, 3, 2].
func evalAt(poly, x, p) {
  total = <p>0
  xPower = <p>1
  for coeff in poly {
    total = total + coeff * xPower mod p
    xPower = xPower * x mod p
  }
  return total
}

// Generate n shares in a "t-of-n" secret split, where we can recover
// secretKey if we have t shares.
func splitSecret(secretKey, t, n, p) {
  poly = [secretKey]
  for i in range(t - 1) {
    // Note: a real implementation should propagate secret types.
    poly.append(reveal(randRange(p)))
  }
  shares = arrayof(typeof(p))
  shares.resize(n)
  for i in range(n) {
    share = evalAt(poly, i + 1, p)
    shares[i] = share
  }
  return shares
}

// The points defined by xArray and yArray are the secret shares.
func recoverSecret(xArray, yArray, p) {
  t = xArray.length()  // t is the "threshold".
  sum = <p>0
  for j in range(t) {
    // The point (x, y) should be on the polynomial.
    xj = xArray[j]
    yj = yArray[j]
    w = <p>1  // The product we multiply y by is called the "weight".
    for m in range(t) {
      if m != j {
        xm = xArray[m]
        // Note: a real implementation should compute the numerator and
        // denominator separately, and only do one modular division at the end.
        w = w * xm / (xm - xj) mod p
      }
    }
    sum = sum + w * yj mod p
  }
  return sum
}

unittest {
  // Prime used for modular arithmetic.
  p = 7919
}

unittest twoOfTwo {
  println "2-of-2 test..."
  println "p = ", p
  secretKey = 7650
  t = 2
  n = 2
  shares = splitSecret(secretKey, t, n, p)
  println "secret = ", secretKey
  recovered = recoverSecret([1, 2], shares, p)
  println "recovered = ", recovered
  assert recovered == secretKey
}

unittest twoOfThree {
  println "2-of-3 test..."
  println "p = ", p
  secretKey = 5035
  t = 2
  n = 3
  shares = splitSecret(secretKey, t, n, p)
  println "secret = ", secretKey
  recovered = recoverSecret([1, 2], shares[0:2], p)
  println "recovered = ", recovered
  assert recovered == secretKey
  recovered = recoverSecret([2, 3], shares[1:3], p)
  println "recovered = ", recovered
  assert recovered == secretKey
}

unittest threeOfFive {
  println "3-of-5 test..."
  println "p = ", p
  secretKey = 1234
  t = 3
  n = 5
  shares = splitSecret(secretKey, t, n, p)
  println "secret = ", secretKey
  recovered = recoverSecret([1, 2, 3], shares[0:3], p)
  println "recovered = ", recovered
  assert recovered == secretKey
  recovered = recoverSecret([1, 3, 4], [shares[0], shares[2], shares[3]], p)
  println "recovered = ", recovered
  assert recovered == secretKey
}
