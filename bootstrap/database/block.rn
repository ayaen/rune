//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use sym

use root
use filepath
use function
use line
use statement

// A liternal block statement.  All statements exist within a block.
class Block(self, line: Line) {
  self.line = line
  // For dead code analysis.
  self.canReturn = false
  self.canContinue = false

  // Dump the block to the end of |text| for debugging.
  func dumpToString(self, var text: string) {
    for statement in self.statements() {
      statement.dumpToString(text)
    }
  }

  // Dump the block to stdout for debugging.
  func dump(self) {
    text = ""
    self.dumpToString(text)
    print text
  }

  // Copy the block's statements into the block containing |destStatement|
  // right after |destStatement|.
  func copyStatementsAfterStatement(self, destStatement: Statement) {
    lastStatement = destStatement
    for statement in self.statements() {
      lastStatement = statement.appendCopyAfterStatement(lastStatement)
    }
  }

  // Move the block's statements into the block containing |destStatement| right
  // after |destStatement|.
  func moveStatementsAfterStatement(self, destStatement: Statement) {
    destBlock = destStatement.block!
    lastStatement = destStatement
    for statement in self.safeStatements() {
      self.removeStatement(statement)
      destBlock.insertAfterStatement(lastStatement, statement)
      lastStatement = statement
    }
  }

  // Append the contents of |self| to |destBlock|, and destroy |self|.
  func appendToBlock(self, destBlock: Block) {
    for statement in self.safeStatements() {
      self.removeStatement(statement)
      destBlock.appendStatement(statement)
    }
    self.destroy()
  }

  // Prepend the contents of |self| to |destBlock|, and destroy |self|.
  func prependToBlock(self, destBlock: Block) {
    for statement in self.safeReverseStatements() {
      self.removeStatement(statement)
      destBlock.insertStatement(statement)
    }
    self.destroy()
  }

  // Make a copy of the block, without sub-blocks.
  func copy(self) -> Block {
    newBlock = Block(self.line)
    for statement in self.statements() {
      statement.appendCopy(newBlock)
    }
    return newBlock
  }

  // Empty the block of contents.
  func destroyStatements(self) {
    for statement in self.safeStatements() {
      statement.destroy()
    }
  }
}

relation OneToOne Statement:"Owning" Block:"Sub" cascade
relation OneToOne Function:"Owning" Block:"Sub" cascade

// Common code between tests.
unittest {
  use value
  use expr

  mainFunc = getMainFunc()
  rootLine = mainFunc.line!
  rootFilepath = rootLine.filepath!

  func createEmptyBlock() -> Block {
    line = Line(rootFilepath, "Create empty block", 0u32)
    return Block(line)
  }

  func createPrintlnBlock(text: string) -> Block {
    block = createEmptyBlock()
    line = Line(rootFilepath, "println \"" + text + "\"", 1u32)
    statement = Statement(block, StateType.Println, line)
    constString = Value(text)
    expr = Expr.newConstant(constString, line)
    statement.insertExpr(expr)
    return block
  }

  func createPrintlnFunction(owningFunc: Function?, name: string, text: string) -> Function {
    block = createPrintlnBlock(text)
    function = Function(owningFunction, FuncType.Plain, Sym.new(name), Linkage.Module, rootLine)
    function.insertSubBlock(block)
    return function
  }

  func countBlockStatements(block: Block) -> u32 {
    count = 0u32
    for statement in block.statements() {
      count += 1
    }
    return count
  }
}

unittest dumpBlockTest {
  block = createPrintlnBlock("Hello, World!")
  block.dump()
}

unittest copyStatementsAfterStatementTest {
  block1 = createPrintlnBlock("Second copied line")
  block2 = createPrintlnBlock("First copied line")
  destStatement = block2.firstStatement!
  block1.copyStatementsAfterStatement(destStatement)
  assert countBlockStatements(block1) == 1
  assert countBlockStatements(block2) == 2
  block2.dump()
}

unittest moveStatementsAfterStatementTest {
  block1 = createPrintlnBlock("Second moved line")
  block2 = createPrintlnBlock("First stationary line")
  destStatement = block2.firstStatement!
  block1.moveStatementsAfterStatement(destStatement)
  assert countBlockStatements(block1) == 0
  assert countBlockStatements(block2) == 2
  block2.dump()
}

unittest destroyTest {
  block = createPrintlnBlock("Second line")
  block.destroy()
}

unittest appendToBlockTest {
  block1 = createPrintlnBlock("Second line")
  block2 = createPrintlnBlock("First line")
  destStatement = block2.firstStatement
  block1.appendToBlock(block2)
  assert countBlockStatements(block2) == 2
  block2.dump()
}

unittest prependToBlockTest {
  block1 = createPrintlnBlock("Second line")
  block2 = createPrintlnBlock("First line")
  destStatement = block2.firstStatement
  block1.prependToBlock(block2)
  assert countBlockStatements(block2) == 2
  block2.dump()
}

unittest copyTest {
  block1 = createPrintlnBlock("Hello")
  block2 = block1.copy()
  assert countBlockStatements(block1) == 1
  assert countBlockStatements(block2) == 1
  block1.dump()
  block2.dump()
}

unittest destroyStatmentsTest {
  block1 = createPrintlnBlock("Second line")
  block2 = createPrintlnBlock("First line")
  block1.appendToBlock(block2)
  block2.destroyStatements()
  assert countBlockStatements(block2) == 0
  block2.dump()
}
