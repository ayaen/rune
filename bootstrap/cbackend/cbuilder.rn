//  Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import database as db
import types

use clanguageclasses
use ctypegen
use escapestring
use int2cstring
use sym

relation HashedClass CurrentScope CIdentifier cascade

class CurrentScope(self) {

  func open(self) {
    // todo
  }

  func close(self) {
    // todo
  }

  func getIdentifier(self, name: Sym, type: CTypeExpr?, bindingInstance: bool, isLocal: bool) -> CIdentifier {
    // TODO: isLocal must be set when name is a variable bound in the current scope
    // i.e., first assigned in the current function body.
    id = CIdentifier(name, type, false, bindingInstance, isLocal)
    exists = self.findCIdentifier(id)
    if isnull(exists) {
      id.firstInstance = true
      self.insertCIdentifier(id)
    } else {
      id.isParameter = exists.isLocal
    }
    return id
  }
}


/**
 * @brief list of declarations
 *
 * When generating code for a function, add any declaration that is created
 * or used inside the function body to a list, which can be added to the
 * enclosing function declaration.
 */
class DependencyList(self) {
  self.names = arrayof(string)

  func append(self, decname: string) {
    self.names.append(decname)
  }
}


/**
 * @brief a stack of dependency lists
 *
 * Functions may be nested, so we maintain a stack of dependency lists,
 * where lists higher up the stack correspond to enclosing function
 * definitions.
 */
relation DoublyLinked DependencyStack DependencyList cascade
class DependencyStack(self) {
  self.open()

  func open(self) {
    self.appendDependencyList(DependencyList())
  }

  func append(self, dec: string | CDeclaration) {
    typeswitch dec {
      string => self.lastDependencyList.append(dec)
      CDeclaration => self.lastDependencyList.append(dec.name())
    }
  }

  func top(self) -> DependencyList {
    return self.lastDependencyList!
  }

  func close(self) {
    top = self.lastDependencyList!
    self.removeDependencyList(top)
  }
}

relation DoublyLinked CBuilder CBlock cascade
relation OneToOne CBuilder DependencyStack cascade

class CBuilder(self, tc: types.TypeChecker) {
  self.currentParamList = null(CParamList)
  self.currentExprList = null(CExprList)
  self.program = CProgram()
  self.currentBlock = null(CBlock)
  self.identifierScope = CurrentScope()
  self.typechecker = tc
  self.typeGenerator = CTypeGenerator(tc)
  self.insertDependencyStack(DependencyStack())

  func build(self, module: db.Function) -> CProgram {
    module.genC(self)
    return self.program
  }

  func openDependencyList(self) {
    self.dependencyStack.open()
  }

  func topDependencyList(self) -> DependencyList {
    return self.dependencyStack.top()
  }

  func closeDependencyList(self) {
    self.dependencyStack.close()
  }

  func addDeclaration(self, dec: CDeclaration) {
    self.dependencyStack.append(dec)
    self.program.insertCDeclaration(dec)
  }

  func findDeclaration(self, name: string) -> CDeclaration? {
    return self.program.findCDeclaration(name)
  }

  func resolveInstantiation(self, inst: types.TyvarInstantiation) {
    // Update a TyvarInstantiation to remove variables: it should be a fully
    // concrete type.
    for index in range(inst.varBindings.length()) {
      inst.varBindings[index] = self.typechecker.resolve(inst.varBindings[index])
    }
    inst.type = self.typechecker.resolve(inst.type)
  }

  func instantiate(self, poly: types.PolymorphicType, inst: types.TyvarInstantiation) {
    self.typechecker.instantiate(poly, inst);
  }

  func deInstantiate(self, poly: types.PolymorphicType) {
    self.typechecker.deInstantiate(poly);
  }

  func specialize(self, sym: Sym, inst: types.TyvarInstantiation) -> Sym {
    // generate a new name including the specializations of the var bindings.
    // Note, we assume that resolveInstantiation() has been called on the
    // inst parameter beforehand.
    name = sym.name
    for binding in inst.varBindings {
      name += "_" + binding.toString()
    }
    newsym = Sym.new(name)
    newsym.typedValue = inst.type
    // Ensure that this new specialized symbol is in identifier scope.
    ctype = self.typeGenerator.genCType(inst.type)
    self.identifierScope.getIdentifier(newsym, ctype, false, false)
    return newsym
  }

  func openScope(self) {
    self.identifierScope.open()
  }

  func closeScope(self) {
    self.identifierScope.close()
  }

  func openBlock(self, location: db.Location?) {
    self.currentBlock = CBlock(location)
    self.appendCBlock(self.currentBlock!)
  }

  func closeBlock(self) -> CBlock {
    block = self.lastCBlock!
    self.removeCBlock(block)
    self.currentBlock = self.lastCBlock
    return block
  }

  func addStatement(self, location: db.Location, statement: CStatement | CExpr) {
    typeswitch statement {
      CStatement => s = statement
      CExpr => s = CStatement(location, CStatementType.Expr, statement)
    }
    if isnull(self.lastCBlock) {
      self.program.addStatementToMain(s)
    } else {
      self.lastCBlock.appendCStatement(s)
    }
  }

  func openParamList(self) {
    assert isnull(self.currentParamList)
    self.currentParamList = CParamList()
  }

  func closeParamList(self) -> CParamList {
    assert !isnull(self.currentParamList)
    params = self.currentParamList!
    self.currentParamList = null(CParamList)
    return params
  }

  func addParam(self, param: CParameter) {
    assert !isnull(self.currentParamList)
    self.currentParamList.appendCParameter(param)
  }

  func genCType(self, ty: types.Type?) -> CTypeExpr? {
    if isnull(ty) {
      return null(CTypeExpr)
    }
    return self.typeGenerator.genCType(ty!)
  }

  // specializedType is used when generating specific instances of a
  // polymorphic type.
  func cParameter(self, location: db.Location, sym: Sym,
                  specializedType: types.Type? = null(types.Type)) -> CParameter {
    if isnull(specializedType) {
      assert !isnull(sym.typedValue)
      ty = self.typechecker.resolve(sym.typedValue!)
      sym.typedValue = ty
      ctype = self.typeGenerator.genCType(ty)
    } else {
      ctype = self.typeGenerator.genCType(specializedType!)
    }
    // Add this parameter to the current scope (otherwise next time we
    // see it, it will appear to be 1st occurrence, and we'll try to
    // declare it).
    self.identifierScope.getIdentifier(sym, ctype, true, true)
    return CParameter(location, sym.name, ctype!)
  }

  func cIdentifier(self, symbol: Sym, bindingInstance: bool) -> CExpr {
    type = self.typechecker.symbol(symbol)
    ctype = null(CTypeExpr)
    if !isnull(type) {
      ty = self.typechecker.resolve(type!)
      ctype = self.typeGenerator.genCType(ty)
    }
    id = self.identifierScope.getIdentifier(symbol, ctype, bindingInstance, false)
    if !isnull(ctype) && id.firstInstance {
      if !isnull(self.currentBlock) {
        self.currentBlock.declare(id)
      } else {
        self.program.mainCBlock.declare(id)
      }
    }
    // Add this to the list of the current scope dependencies, unless it
    // is a parameter, or a local definition.
    if !id.isParameter {
      // TODO: figure out how to track local definition.
      self.dependencyStack.append(id.symbol.name)
    }
    return CExpr(id)
  }

  func cType(self, type: CType) -> CTypeExpr {
    return CTypeExpr(type)
  }

  func cIntType(self, location: db.Location, isSigned: bool, width: u32) -> CTypeExpr {
    if isSigned {
      if width <= 8 {
        prim = CPrimitiveType(CPrimitiveType.Type.Int8)
      } else if width <= 16 {
        prim = CPrimitiveType(CPrimitiveType.Type.Int16)
      } else if width <= 32 {
        prim = CPrimitiveType(CPrimitiveType.Type.Int32)
      } else if width <= 64 {
        prim = CPrimitiveType(CPrimitiveType.Type.Int64)
      } else {
        raise Status.Unimplemented, "No support for primitive integers of width larger than 64"
      }
    } else {
      if width <= 8 {
        prim = CPrimitiveType(CPrimitiveType.Type.Uint8)
      } else if width <= 16 {
        prim = CPrimitiveType(CPrimitiveType.Type.Uint16)
      } else if width <= 32 {
        prim = CPrimitiveType(CPrimitiveType.Type.Uint32)
      } else if width <= 64 {
        prim = CPrimitiveType(CPrimitiveType.Type.Uint64)
      } else {
        raise Status.Unimplemented, "No support for primitive integers of width larger than 64"
      }
    }
    return CTypeExpr(prim)
  }

  func cFloatType(self, location: db.Location, width: u32) -> CTypeExpr {
    if width == 32 {
      return CTypeExpr(CPrimitiveType(CPrimitiveType.Type.Float))
    } else if width == 64 {
      return CTypeExpr(CPrimitiveType(CPrimitiveType.Type.Double))
    }
    raise Status.Unimplemented, "No support for floating point width %u32." % width
  }

  func cStringType(self, location: db.Location) -> CTypeExpr {
    return CTypeExpr(CDefinedType("string"))
  }

  func cBooleanType(self, location: db.Location) -> CTypeExpr {
    return CTypeExpr(CPrimitiveType(CPrimitiveType.Type.Int8))
  }

  func cVoidType(self, location: db.Location) -> CTypeExpr {
    return CTypeExpr(CPrimitiveType(CPrimitiveType.Type.Void))
  }

  /* Rune expressions *********************************************************************/

  func openExprList(self) {
    assert isnull(self.currentExprList)
    self.currentExprList = CExprList()
  }

  func closeExprList(self) -> CExpr {
    assert !isnull(self.currentExprList)
    list = self.currentExprList!
    self.currentExprList = null(CExprList)
    return CExpr(list)
  }

  func addExpr(self, expr: CExpr) {
    assert !isnull(self.currentExprList)
    self.currentExprList.appendCExpr(expr)
  }

  func cStringLiteral(self, value: string, printf: bool = false) -> CExpr {
    return CExpr(CLiteral(value, printf))
  }

  func cBoolLiteral(self, value: bool) -> CExpr {
    return CExpr(CLiteral(value, false))
  }

  func cIntLiteral(self, value: db.Bigint) -> CExpr {
    return CExpr(CLiteral(value, false))
  }

  func cUintLiteral(self, value: Uint) -> CExpr {
    return CExpr(CLiteral(value, false))
  }

  func cFloatLiteral(self, value: Float) -> CExpr {
    return CExpr(CLiteral(value, false))
  }

  func cUnaryMinus(self, location: db.Location, arg: CExpr) -> CExpr {
    return CExpr(CPrefixOperator(location, CPrefixOperator.Type.UnaryMinus, arg))
  }

  func cUnaryBitnot(self, location: db.Location, arg: CExpr) -> CExpr {
    return CExpr(CPrefixOperator(location, CPrefixOperator.Type.BitNot, arg))
  }

  func cBinaryOperator(self, location: db.Location, op: CBinaryOperator.Type,
                       type: types.Type?, left: CExpr, right: CExpr) -> CExpr {
    ctype = self.genCType(type)
    return CExpr(CBinaryOperator(location, op, ctype, left, right))
  }

  func cCall(self, location: db.Location, fn: string | CExpr | CRuntimeFunction, args: CExpr?) -> CExpr {
    typeswitch fn {
      string => {
        call = CCall(location, CRuntimeFunction.UserDefined, args,
                     CExpr(CIdentifier(Sym.new(fn), null(CTypeExpr), false, false, false)))
        depdec = self.findDeclaration(fn)
        if !isnull(depdec) {
          self.dependencyStack.append(depdec!)
        }
      }
      CExpr => call = CCall(location, CRuntimeFunction.UserDefined, args, fn)
      CRuntimeFunction => call = CCall(location, fn, args)
    }
    return CExpr(call)
  }

  // Tuples are special because they have no name, and different instances of the
  // type should match without difficulty. The idea is to generate a C structure type for
  // each different shape (or _type_) of tuple. We need to remember the definitions
  // we create for each separate tuple type, so that we can reuse them the next time
  // this tuple appears. To do this, we use a hash table, and the tuple type as a key.
  //
  // NOTE: tuples with element types with unbound type variables are not supported.
  func cTuple(self, location: db.Location, type: types.Type?, elements: CExprList) -> CExpr {
    ty = self.typechecker.resolve(type!);
    assert ty.type == types.Type.TypeClass.Tuple
    def = CTupleDefinition(ty.tuple, "")
    exists = self.typeGenerator.findCTupleDefinition(def)

    if isnull(exists) {
      // generate a new type
      ctype = self.typeGenerator.genCTuple(ty.tuple)
      assert !isnull(ctype)
      exists = self.typeGenerator.findCTupleDefinition(def)
      assert !isnull(exists)
    }

    if !exists.defined {
      // Create the C struct definition -------------
      params = CParamList()
      deps = arrayof(string)
      for pair in def.type.elements.items() {
        ctype = self.typeGenerator.genCType(pair[1])
        if ctype.type == CTypeExpr.Type.Defined {
          deps.append(ctype.toString())
        }
        params.append(CParameter(location, "el%s" % int2cstring(pair[0]), ctype!))
      }

      // The struct declaration will emit as 'typedef struct <exists.name> {...} <exists.name>'
      // It will also emit:
      //    'make_<exists.name>(<params>)' and
      //    'tostring_<exists.name>'(<exists.name> tuple) method
      //    'isequal_<exists.name>'(<exists.name> t1, <exists.name> t2) method.
      //
      dec = CDeclaration(CStructDeclaration(location, exists.name, params))

      // Walk through the list of dependent type names to add dependent declarations to
      // dec, so that they will be emitted before this one.
      for name in deps {
        depdec = self.findDeclaration(name)
        if !isnull(depdec) {
          dec.addDependency(depdec!)
        }
      }
      self.addDeclaration(dec)
      exists.defined = true
    }

    constructorName = CIdentifier(Sym.new("make_%s" % exists.name), null(CTypeExpr),
                                  false, false, false)
    return CExpr(CCall(location, CRuntimeFunction.UserDefined, CExpr(elements),
                       CExpr(constructorName)))
  }

  func cIndex(self, location: db.Location, indexee: CExpr, index: CExpr) -> CExpr {
    return CExpr(CIndexExpr(location, indexee, index))
  }

  func cTupleIndex(self, location: db.Location, indexee: CExpr, index: u64) -> CExpr {
    return CExpr(CDotExpr(location, indexee, "el%s" % int2cstring(index)))
  }

  /* Rune statements *******************************************************************/

  func cPrintlnStatement(self, location: db.Location, args: CExpr) -> CStatement {
    return CStatement(CStatementType.Call, self.cCall(location, CRuntimeFunction.Printf, args))
  }

  func cIfStatement(self, location: db.Location, expr: CExpr, body: CBlock) -> CStatement {
    return CStatement(location, CStatementType.If,expr, body)
  }

  func cElseStatement(self, location: db.Location, body: CBlock) -> CStatement {
    return CStatement(location, CStatementType.Else, null(CExpr), body)
  }

  func cElseIfStatement(self, location: db.Location, expr: CExpr, body: CBlock) -> CStatement {
    return CStatement(location, CStatementType.ElseIf, expr, body)
  }

  func cReturnStatement(self, location: db.Location, expr: CExpr?) -> CStatement {
    return CStatement(location, CStatementType.Return, expr)
  }

  /* Rune declarations *****************************************************************/

  // specializedType is used when generating specific instances of a
  // polymorphic type.
  func cFunDef(self, location: db.Location, id: Sym, params: CParamList,
               body: CBlock) -> CDeclaration {
    type = id.typedValue
    switch type.type {
      types.Type.TypeClass.Function => {
        returnType = self.genCType(type.function.result!)
      }
      types.Type.TypeClass.Polymorphic => {
        raise Status.InvalidArgument, "Polymorphic functions should be specialized by now."
      }
      default => {
        raise Status.InvalidArgument, "The type of function ", id.name, " should be a function"
      }
    }
    returntype = self.genCType(type)
    return CDeclaration(CFunctionDeclaration(location, id, params, returnType!, body))
  }

}

