//  Copyright 2023 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

generator Map(A, B, cascadeDelete = false, labelA = "", labelB = "") {
  prependcode A {
    self.$B_s = arrayof(B)
  }

  appendcode A {
    func insert$B(self, key, entry) {
      self.$B_s.append(entry)
      entry.$A = self
      ref entry
    }

    func find$B(self, key) {
      for i = 0, i < self.$B_s.length(), i += 1 {
        if self.$B_s[i].key == key {
	  return self.$B_s[i]
	}
      }
      return null(self.$B_s[0])
    }
  }

  prependcode B {
    self.$A = null(A)
  }
}

relation Map Symtab<key> Sym<key>

class Symtab(self, <key>) {
}

class Sym(self, symtab, <key>) {
  self.key = key
  symtab.insertSym(key, self)
}

symtab = Symtab(string)
a = Sym(symtab, "a")
b = Sym(symtab, "b")
c = Sym(symtab, "c")
println symtab.findSym("a")!
println symtab.findSym("b")!
println symtab.findSym("c")!
